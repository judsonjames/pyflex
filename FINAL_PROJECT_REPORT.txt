################################################################################
Pyflex - A Python Lexical Analyzer
################################################################################
# Final Project Report
# 
# Authors:    Judson James and Peyton Chandarana
# Course:     CSCE 578
# Semester:   Spring 2019
#
################################################################################
Abstract:
  Pyflex is a python tool that emulates a C utility called Fast Lex, a lexical
analyzer used for finding matches based on a specified ruleset.
  Pyflex takes the ideas of specifying rulesets or regular expressions and uses
the specifications to parse a file and find matching expressions throughout an 
input file. When matches are found an optional action in the form of a python
function can be called to perform some arbitrary task.

################################################################################
File/Program Structure:

  
  generated_code.py - This file contains the code generated by generator.py
                      for use in parsing/scanning for matches to the regular
                      expressions specified in the pyfl file. It also contains
                      any user defined code that was placed in the pyfl file.
  
       generator.py - This python code generates the code found in
                      generated_code.py.
  
          parser.py - This file gets the specifications and code stored in the
                      pyfl file. It interprets and stores these in a symbol 
                      table for later use by the generator to create the 
                      generated code.

            main.py - This is the driver of the pyflex program.
  
    symbol_table.py - This file contains the SymbolTable class which acts as
                      a data structure for storing the information that the
                      parser gets from the pyfl file.

################################################################################
Methodology:


################################################################################
Conclusion:


################################################################################
Future Improvements:


################################################################################
